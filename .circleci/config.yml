version: 2

general:
# Uncomment the following to specify only a specific branch
#   branches:
#     only:
#       - dev # specific branch
#       - /dev-.*/ # or regexes


jobs:
  build:
    machine: true
    working_directory: ~/ci_app
    environment:
      # from https://developer.salesforce.com/docs/atlas.en-us.sfdx_setup.meta/sfdx_setup/sfdx_setup_install_cli_standalone.htm
      # and https://developer.salesforce.com/media/salesforce-cli/manifest.json
      - DX_CLI_URL: https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
    steps:
      - checkout
      - run:
          name: Download CLI
          command: |
            mkdir sfdx
            wget -qO- $DX_CLI_URL | tar xJ -C sfdx --strip-components 1
      - run:
          name: Install CLI
          command: |
            ./sfdx/install
            sfdx
            mkdir tmp
      - run:
          name: Create hub key
          command: |
            echo 'make hub key'
            #- mkdir keys
            #- echo $HUB_SERVER_KEY_HEX | xxd -r -ps >> keys/hub.key
            openssl enc -nosalt -aes-256-cbc -d -in assets/server.key.enc -out assets/server.key -base64 -K $DECRYPTION_KEY -iv $DECRYPTION_IV
            #openssl enc -nosalt -aes-256-cbc -in assets/server.key.enc -out assets/server.key -base64 -K $DECRYPTION_KEY -iv $DECRYPTION_IV
            #- openssl rsa -in keys/hub.key -check -noout
          ### Uncomment the following if performing deployments
          #- echo 'make deploy key'
          #- echo $DEPLOY_SERVER_KEY_HEX | xxd -r -ps >> keys/deploy.key
          #- openssl rsa -in keys/deploy.key -check -noout
          #- sfdx force:auth:jwt:grant --clientid $DEPLOY_CONSUMER_KEY --jwtkeyfile keys/deploy.key --username $DEPLOY_SFDC_USER -a deploy
      - run:
          name: Setup Org
          command: |
            echo 'Running tests'
            sfdx force:auth:jwt:grant --clientid $HUB_CONSUMER_KEY --jwtkeyfile assets/server.key --username $HUB_SFDC_USER --setdefaultdevhubusername -a DevHub
            echo "export TEST_MESSAGE=`AUTH SUCCESS`" >> $BASH_ENV
            sfdx force --help
            sfdx force:org:create -s -f ~/ci_app/config/project-scratch-def.json -a circle_build_$CIRCLE_BUILD_NUM --wait 3
            #sfdx force:org:create -s -f ~/ci_app/config/project-scratch-def.json -a circle_build_$CIRCLE_BUILD_NUM --wait 3 || echo "export TEST_RESULT_1=${?}" >> $BASH_ENV
            echo "ORG CREATE SUCCESS" >> $BASH_ENV
            sfdx force:org:list --all
            sfdx force:source:push -u circle_build_$CIRCLE_BUILD_NUM
            #sfdx force:source:push -u circle_build_$CIRCLE_BUILD_NUM || echo "export TEST_RESULT_2=${?}" >> $BASH_ENV
            echo "SOURCE PUSH TO ORG SUCCESS" >> $BASH_ENV
      - run:
          name: Run Apex Tests
          command: |
            mkdir -p ~/junit
            sfdx force:apex:test:run -r human  --wait 5 > result.txt 
            #sfdx force:apex:test:run -r human  --wait 5 > result.txt || echo "export TEST_RESULT_3=${?}" >> $BASH_ENV
            #sfdx force:apex:test:run -c -d ~/junit -r junit --wait 5 > result.txt
            echo "TEST RUN SUCCESS" >> $BASH_ENV
            #echo ${TEST_RESULT_1:-0} >> result.txt
            #echo ${TEST_RESULT_2:-0} >> result.txt
            #echo ${TEST_RESULT_3:-0} >> result.txt
            echo $BASH_ENV >> result.txt
            git config user.email "mkawa0520@gmail.com"
            git config user.name "kawasakiGit20190208"
            git add result.txt
            git commit -m 'build [ci skip]'
            git push origin master;
            echo "RESULT PUSH TO GIT SUCCESS" >> $BASH_ENV


      - run:
          name: Upload Failed Tests
          when: on_fail
          command: |
             echo "JOB FAILED! CONFIRM CIRCLE CI" >> $BASH_ENV
             echo $TEST_MESSAGE >> result.txt
             git config user.email "mkawa0520@gmail.com"
             git config user.name "kawasakiGit20190208"
             git add result.txt
             git commit -m 'build [ci skip]'
             git push origin master;

      - store_test_results:
          path: ~/junit
      - run:
          name: Delete Useless Scratch Org
          command: |
            sfdx force:org:delete -u circle_build_$CIRCLE_BUILD_NUM -p

### Uncomment the following if performing deployments
#deployment:
#  override:
#    - sfdx force:source:convert -r force-app -d testDeploy
#    - . cleanupDeploy.sh
#    - sfdx force:mdapi:deploy -d testDeploy/ -u deploy -w 2
